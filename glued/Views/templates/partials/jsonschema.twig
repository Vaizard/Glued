
{% if json_schema_output is defined %}
    
    <!-- <script type="text/javascript" src="https://fiddle.jshell.net/js/babel/babel.js"></script> -->
    <script type="text/javascript" src="{{ public_path }}/js/babel.js"></script>
    
    <script src="https://unpkg.com/react@15/dist/react.min.js"></script>
    <script src="https://unpkg.com/react-dom@15/dist/react-dom.min.js"></script>
    <script src="https://unpkg.com/react-jsonschema-form@latest/dist/react-jsonschema-form.js"></script>
    
    
    <style type="text/css">
    ul.list-inline li {
        display: inline-block;
        margin-right: 10px;
    }
    ul.list-inline li a.btn {
        display: block;
        height: calc(2.25rem + 2px);
    }
    .btn-add {
        width: 80px;
        margin-top: 15px;
    }
    /* nahrazeni contentu tlacitek */
    .btn-add i, .array-item-remove i, .array-item-move-up i, .array-item-move-down i {
        display: none;
    }
    .btn-add:after {
        content: "Add";
    }
    .array-item-remove:after {
        content: "Delete";
    }
    .array-item-move-up:after {
        content: "Up";
    }
    .array-item-move-down:after {
        content: "Down";
    }
    
    .nas-small-select select {
        height: calc(1.8125rem + 2px) !important;
    }
    
    </style>
    
    
  <title>json schema template</title>

<script type="text/babel">
const Form = JSONSchemaForm.default;



const uiSchema = {{ json_uischema_output | raw }};

const schema = {{ json_schema_output | raw }};

const formData = {{ json_formdata_output | raw }};




function onSubmit(formData) {
    {{ json_onsubmit_output | raw }}
}

function onChange(formData) { }


{% if json_formdata_render_custom_array is defined %}

const MyCustomWidget = (props) => {
  return (
    <input type="text"
      className="form-control underlined"
      value={props.value}
      required={props.required}
      onChange={(event) => props.onChange(event.target.value)} />
  );
};

const NrGroupWidget = (props) => {
  return (
<div className="input-group input-group-sm">
    <span className="input-group-addon">{props.options.textik}</span>
    <input type="text" className="form-control" value={props.value} placeholder={props.placeholder} required={props.required} onChange={(event) => props.onChange(event.target.value)} />
</div>
  );
};

const DateGroupWidget = (props) => {
  return (
<div className="input-group input-group-sm">
    <span className="input-group-addon">{props.options.textik}</span>
    <input type="date" className="form-control" value={props.value} placeholder={props.placeholder} required={props.required} onChange={(event) => props.onChange(event.target.value)} />
</div>
  );
};

const FloatingLabelWidget = (props) => {
  return (
    <input type="text" id={props.id} className="form-control underlined" value={props.value} placeholder={props.placeholder} required={props.required} onChange={(event) => props.onChange(event.target.value)} />
  );
};


const widgets = {
  myCustomWidget: MyCustomWidget,
  nrGroupWidget: NrGroupWidget,
  dateGroupWidget: DateGroupWidget,
  floatingLabelWidget: FloatingLabelWidget
};



function ArrayFieldTemplate(props) {
  return (
    <div className={props.className}>
      <div className="title-and-add clearfix">
            <legend>{props.title}</legend>
            <button onClick={props.onAddClick} type="button" className="btn btn-info btn-oval btn-sm addArrayItemBtn"> + {props.title}</button>
      </div>
      {props.items &&
        props.items.map(element => (
          <div key={element.index} className="row">
            <div className="col-md-10">{element.children}</div>
            <div className="col-md-2">
                <button onClick={element.onDropIndexClick(element.index)} className="btn btn-danger btn-sm bottomized">
                  x
                </button>
            </div>
          </div>
        ))}
    </div>
  );
}

ReactDOM.render((<Form onChange={onChange} onSubmit={onSubmit} uiSchema={uiSchema} schema={schema} formData={formData} ArrayFieldTemplate={ArrayFieldTemplate} widgets={widgets} ></Form>),
    document.getElementById("main"), function() {
        $(".form-label-group input").focus(function() {
            $(this).addClass("activated").siblings("label").addClass("labelisima");
        });
        $(".form-label-group input").blur(function() {
            if ($(this).val() == "") {
                $(this).removeClass("activated").siblings("label").removeClass("labelisima");
            }
        });
        $(".form-label-group input").each(function() {
            if ($(this).val() != "") {
                $(this).addClass("activated").siblings("label").addClass("labelisima");
            }
        });
        $(".addArrayItemBtn").click(function() {
            var parrent_array = $(this).closest(".field-array");
            setTimeout(function() {
                
                parrent_array.find(".form-label-group input").focus(function() {
                    $(this).addClass("activated").siblings("label").addClass("labelisima");
                });
                parrent_array.find(".form-label-group input").blur(function() {
                    if ($(this).val() == "") {
                        $(this).removeClass("activated").siblings("label").removeClass("labelisima");
                    }
                });
                parrent_array.find(".form-label-group input").each(function() {
                    if ($(this).val() != "") {
                        $(this).addClass("activated").siblings("label").addClass("labelisima");
                    }
                });
                
            }, 500);
        });
        
        $(".select2block input.form-control").select2({
            tags: true
        });
        
});

{% else %}

ReactDOM.render((<Form onChange={onChange} onSubmit={onSubmit} uiSchema={uiSchema} schema={schema} formData={formData}></Form>),
    document.getElementById("main"));

{% endif %}


</script>

{% endif %}